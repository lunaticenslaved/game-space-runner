datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(uuid())
  login    String    @db.VarChar(255)
  password String    @db.Text
  sessions Session[]
  avatars  Avatar[]
  posts    Post[]
  comment  Comment[]
  Player   Player[]

  @@map("users")
}

model Session {
  id String @id @default(uuid())

  accessToken  String  @db.Text
  refreshToken String  @db.Text
  userAgent    String? @db.Text

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("sessions")
}

model Avatar {
  id String @id @default(uuid())

  link String @db.Text

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("avatars")
}

model Post {
  id String @id @default(uuid())

  title   String @db.VarChar(255)
  content String @db.Text

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @default(now()) @db.Date

  comments Comment[]

  @@map("posts")
}

model Comment {
  id String @id @default(uuid())

  text String @db.Text

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @default(now()) @db.Date

  @@map("comments")
}

model Player {
  id String @id @default(uuid())

  score Int @db.Integer

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("players")
}
